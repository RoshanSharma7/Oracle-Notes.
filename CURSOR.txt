CURSOR: (04-10-2024)
========
	 - It is a temporary memory / work space / sql private area.
	 - Pl/sql supports the following two types of cursors.
		i) Explicit cursor ( User defined cursor )
		ii) Implicit cursor ( System defined cursor )

i) Explicit cursor:
==============
	- these cursors are declaring by user for fetch multiple rows from a table.
	- to declare an explicit cursor then we follow the following four types are,

step1: Declare cursor variable:
==========================
syntax:
======
declare cursor <cursor name> is <select query>;

step2: Open cursor connection:
===========================
syntax:
======
open <cursor name>;

step3: Fetching rows from cursor memory:
===================================
syntax:
=======
fetch <cursor name> into <variables>;

step4: Close cursor connection:
==========================
syntax:
======
close <cursor name>;

Attributes of Explicit cursor:
========================
	- to check the status of cursor.
syntax:
======
	<cursor name>%<attribute name>;

i) %isopen:
=========
	- it is a default attribute of cursor.
	- it returns TRUE when cursor connection is open successfully otherwise it return
	FALSE.

ii) %notfound:
===========
	- it returns TRUE when cursor is not having data otherwise it return FALSE.

iii) %found:
=========
	- it return TRUE when cursor is having data otherwise it return FALSE.

iv) %rowcount:
============
	- it return the no.of fetch statements are executed on cursor table.

05-10-2024:
=========
Ex:
write a cursor program to fetch a single row from emp table?
SQL> DECLARE CURSOR C1 IS SELECT ENAME,SAL FROM EMP;
  2  v_ENAME VARCHAR2(10);
  3  v_SAL NUMBER(10);
  4  BEGIN
  5  OPEN C1;
  6  FETCH C1 INTO v_ENAME,v_SAL;
  7  DBMS_OUTPUT.PUT_LINE(v_ENAME||','||v_SAL);
  8  CLOSE C1;
  9  END;
 10  /

OUTPUT:
SMITH,2200

Ex:
write a cursor program to fetch multiple rows from emp table?
SQL> DECLARE CURSOR C1 IS SELECT ENAME,SAL FROM EMP;
  2  v_ENAME VARCHAR2(10);
  3  v_SAL NUMBER(10);
  4  BEGIN
  5  OPEN C1;
  6  FETCH C1 INTO v_ENAME,v_SAL;
  7  DBMS_OUTPUT.PUT_LINE(v_ENAME||','||v_SAL);
  8  FETCH C1 INTO v_ENAME,v_SAL;
  9  DBMS_OUTPUT.PUT_LINE(v_ENAME||','||v_SAL);
 10  CLOSE C1;
 11  END;
 12  /

OUTPUT:
SMITH,2200
ALLEN,1600

	- Generally by using fetch statement we will fetch a single row from a cursor
table at a time.so that in the above example we used no.of fetch statements for fetching
multiple rows from a cursor table.
	- To overcome the above problem(i.e no.of fetch statements) we should use 
"looping statements" are,

i) By using "Simple Loop":
======================
SQL> DECLARE CURSOR C1 IS SELECT ENAME,SAL FROM EMP;
  2  v_ENAME VARCHAR2(10);
  3  v_SAL NUMBER(10);
  4  BEGIN
  5  OPEN C1;
  6  LOOP
  7  FETCH C1 INTO v_ENAME,v_SAL;
  8  EXIT WHEN C1%NOTFOUND;
  9  DBMS_OUTPUT.PUT_LINE(v_ENAME||','||v_SAL);
 10  END LOOP;
 11  CLOSE C1;
 12  END;
 13  /

OUTPUT:
========
SMITH,2200
ALLEN,1600
WARD,1250
JONES,4400
MARTIN,1250
BLAKE,2850
CLARK,2450
SCOTT,3000
KING,5000
TURNER,1500
ADAMS,1100
smith,950
FORD,3000

ii) By using "While Loop":
======================
SQL> DECLARE CURSOR C1 IS SELECT ENAME,SAL FROM EMP;
  2  v_ENAME VARCHAR2(10);
  3  v_SAL NUMBER(10);
  4  BEGIN
  5  OPEN C1;
  6  FETCH C1 INTO v_ENAME,v_SAL;
  7  WHILE(C1%FOUND)
  8  LOOP
  9  DBMS_OUTPUT.PUT_LINE(v_ENAME||','||v_SAL);
 10  FETCH C1 INTO v_ENAME,v_SAL;
 11  END LOOP;
 12  CLOSE C1;
 13  END;
 14  /

OUTPUT:
=========
SMITH,2200
ALLEN,1600
WARD,1250
JONES,4400
MARTIN,1250
BLAKE,2850
CLARK,2450
SCOTT,3000
KING,5000
TURNER,1500
ADAMS,1100
smith,950
FORD,3000
MILLER,1300

iii) By using "For Loop":
====================
SQL> DECLARE CURSOR C1 IS SELECT ENAME,SAL FROM EMP;
  2  BEGIN
  3  FOR i IN C1
  4  LOOP
  5  DBMS_OUTPUT.PUT_LINE(i.ENAME||','||i.SAL);
  6  END LOOP;
  7  END;
  8  /

OUTPUT:
========
SMITH,2200
ALLEN,1600
WARD,1250
JONES,4400
MARTIN,1250
BLAKE,2850
CLARK,2450
SCOTT,3000
KING,5000
TURNER,1500
ADAMS,1100
smith,950
FORD,3000
MILLER,1300

07-10-2024:
==========
ii) Implicit cursor:
===============
	- these cusrors are declaring by oracle server by default when we perform DML 
operations on a table in the database.
	- implicit cursors are used to store the status of the last DML command is executed 
successfully or not.
	- this implicit cursor memory is creating by oracle server with the name of "SQL".

Attributes of an implicit cursor:
===========================
	- to check the status of cursor.

syntax:
=======
	SQL%<attribute name>

i) %isopen:
=========
	- it is a default attribute of a cursor.
	- it returns TRUE when cursor connection is open successfully otherwise retun FALSE.

ii) %notfound:
===========
	- it return "TRUE" when DML command is not executed otherwise return "FALSE".

iii) %found:
=========
	- it return "TRUE" when DML command is executed otherwise return FALSE.

iv) %rowcount:
=============
	- it return how no.of rows are affected by DML command.

Ex:
SQL> DECLARE
  2  v_EMPNO NUMBER(4);
  3  BEGIN
  4  v_EMPNO:=&v_EMPNO;
  5  DELETE FROM EMP WHERE EMPNO=v_EMPNO;
  6  IF SQL%FOUND THEN
  7  DBMS_OUTPUT.PUT_LINE('YES,RECORD IS FOUND AND DELETED');
  8  ELSE
  9  DBMS_OUTPUT.PUT_LINE('NO,RECORD IS NOT FOUND');
 10  END IF;
 11  END;
 12  /

TESTING:
========
Enter value for v_empno: 7788
YES,RECORD IS FOUND AND DELETED

SQL> /
Enter value for v_empno: 1122
NO,RECORD IS NOT FOUND

REF CURSORS: (DYNAMIC CURSOR)
==============================
	- when we assign a "SELECT" query at the time of opening a cursor connection under 
execution block is known as "ref cursor / dynamic cursor".
	- these are again classified into tw types.
		i) Weak ref cursor
		ii) Strong ref cursor

	weak ref cursor 				strong ref cursor
	=============				===============
1. declaring a weak ref cursor variable		1. declaring a strong ref cursor variable 
without "return" type.			with "return" type.

2. there is a pre-defined datatype for 		2. there is no pre-defined datatype for strong
weak ref cursor variable declaration.		ref cursor variable.so that user has to create 
					user-defined datatype.
syntax:					syntax:
======					=======
<weak ref cursor variable name> sys_refcursor;	type <type name> is ref cursor return 'type';				
					<strong ref cursor variable name> <type name>;

3. it can access data from any table.		3. it can access data from a specific a table 
i.e more than one table.			only(i.e single table only).


Ex on weak ref cursor with a single table:
==================================
SQL> DECLARE
  2  C1 SYS_REFCURSOR;
  3  i EMP%ROWTYPE;
  4  BEGIN
  5  OPEN C1 FOR SELECT * FROM EMP WHERE DEPTNO=10;
  6  LOOP
  7  FETCH C1 INTO i;
  8  EXIT WHEN C1%NOTFOUND;
  9  DBMS_OUTPUT.PUT_LINE(i.EMPNO||','||i.ENAME||','||i.DEPTNO);
 10  END LOOP;
 11  CLOSE C1;
 12  END;
 13  /

OUTPUT:
==============
7934,MILLER,10
7782,CLARK,10
7839,KING,10

Ex on strong ref cursor with a single table:
===================================
    DECLARE
    TYPE UD_REFCURSOR IS REF CURSOR RETURN EMP%ROWTYPE;
    C1 UD_REFCURSOR;
    i EMP%ROWTYPE;
    BEGIN
    OPEN C1 FOR SELECT * FROM EMP WHERE DEPTNO=10;
    LOOP
    FETCH C1 INTO i;
    EXIT WHEN C1%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(i.EMPNO||','||i.ENAME||','||i.DEPTNO);
   END LOOP;
   CLOSE C1;
   END;
   /

OUTPUT:
==============
7934,MILLER,10
7782,CLARK,10
7839,KING,10

Ex on weak ref cursor with multiple tables:
===================================
SQL> DECLARE
  2  C1 SYS_REFCURSOR;
  3  i EMP%ROWTYPE;
  4  j DEPT%ROWTYPE;
  5  v_DEPTNO NUMBER(10):=&v_DEPTNO;
  6  BEGIN
  7  IF v_DEPTNO=10 THEN
  8  OPEN C1 FOR SELECT * FROM EMP WHERE DEPTNO=10;
  9  LOOP
 10  FETCH C1 INTO i;
 11  EXIT WHEN C1%NOTFOUND;
 12  DBMS_OUTPUT.PUT_LINE(i.EMPNO||','||i.ENAME||','||i.SAL||','||i.DEPTNO);
 13  END LOOP;
 14  ELSIF v_DEPTNO=20 THEN
 15  OPEN C1 FOR SELECT * FROM DEPT WHERE DEPTNO=20;
 16  LOOP
 17  FETCH C1 INTO j;
 18  EXIT WHEN C1%NOTFOUND;
 19  DBMS_OUTPUT.PUT_LINE(j.DEPTNO||','||j.DNAME||','||j.LOC);
 20  END LOOP;
 21  CLOSE C1;
 22  END IF;
 23  END;
 24  /

OUTPUT:
=========
Enter value for v_deptno: 10
7934,MILLER,1300,10
7782,CLARK,2450,10
7839,KING,5000,10

SQL> /
Enter value for v_deptno: 20
20,RESEARCH,DALLAS































