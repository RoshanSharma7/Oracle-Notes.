FUNCTIONS IN ORACLE:
====================
	- to perform some task as per the given input values and it must return a value.
	- oracle supports the following two types of functions.
					1. pre-defined functions
							> Use in SQL & PL/SQL.
					2. user-defined functions
							> Use in PL/SQL only.

1. pre-defined functions:
==========================
		- these functions are also called as "Built-In-Functions" in oracle.
		- there are two types of pre-defined functions.
						i) Single - row functions(Scalar functions)
						ii) Multiple - row functions (Grouping functions / Aggregative 																- functions)

					
i) Single - row functions:
===========================
		- these functions are return a single value.
					> Numeric functions
					> Character / String functions
					> Date functions
					> Null functions
					> Conversion functions
					> Analytical functions ( in subquery)

How to call a function:
=======================
syntax:
=======
SELECT <FNAME>(VALUES) FROM DUAL;

What is dual?
=============
	- it is a system defined table in oracle.
	- it is used to test function functionalities(i.e workflow)
	- dual is having a single column and a single row.

How to view the structure of dual table:
=========================================
syntax:
=======
desc <table name>;

Ex:
sql> desc dual;
                                                                                    Name										Null?    Type
 ----------------------------------------------------------------------------------
 DUMMY  													VARCHAR2(1)   

How to view data in dual table:
===============================
syntax:
=======
select* from dual;                                                                                    

D --------- single column
-
X --------- single row

Numeric functions:
=================
ABS():
======
	- to convert (-ve) sign vaues into (+ve) sign values.

syntax:
=======
	abs(n)

Ex:
SQL> SELECT ABS(-12) FROM DUAL;
SQL> SELECT ENAME,SAL,COMM,ABS(COMM-SAL) AS TOTAL FROM EMP;

CEIL():
=======
	- it return a value which is greater than or is equals to the given expression.

syntax:
=======
	ceil(n)

Ex:
SQL> SELECT CEIL(9.0) FROM DUAL;

 CEIL(9.0)
----------
         9

SQL> SELECT CEIL(9.1) FROM DUAL;

 CEIL(9.1)
----------
        10

FLOOR():
=======
	- it return a value which is less than or is equals to the given expression.

syntax:
=======
	floor(n)

EX:
SQL> SELECT FLOOR(9.0) FROM DUAL;

FLOOR(9.0)
----------
         9

SQL> SELECT FLOOR(9.8) FROM DUAL;

FLOOR(9.8)
----------
         9

MOD():
======
	- it return the remainder value from the given expression.
syntax:
=======
	mod(m,n)

Ex:
SQL> SELECT MOD(10,2) FROM DUAL;

 MOD(10,2)
----------
         0

SQL> SELECT * FROM EMP WHERE MOD(EMPNO,2)=0;
SQL> SELECT * FROM EMP WHERE MOD(EMPNO,2)=1;

POWER():
========
	- it return the power of the given expression.

syntax:
=======
	power(m,n) 

Ex:
SQL> SELECT POWER(2,3) FROM DUAL;

POWER(2,3)
----------
         8

SQL> SELECT ENAME,SAL,POWER(SAL,2) AS RESULT FROM EMP;

ROUND():
========
	- it return the nearest value of the given expression.
	- consider the nearest values with 0.5 expression.
		- the value < 0.5 ---> add "0" to main value.
		- the value = 0.5 ---> add "1" to main value.
		- the value > 0.5 ---> add "1" to main value.

syntax:
=======
	round(expression[, decimal places])

Ex:
SQL> SELECT ROUND(45.2) FROM DUAL;

SOLUTION:
==========
		45.2===> 0.2 < 0.5 ===> ADD "0" TO MAIN VALUE
	     (+) 0
		====
		45
		====


EX:
SELECT ROUND(45.5) FROM DUAL;

SOLUTION:
=========
	45.5 ===> 0.5 = 0.5 ===> ADD "1" TO MAIN VALUE
	+1
	====
	46
	===

EX:
SQL> SELECT ROUND(45.8) FROM DUAL;

SOLUTION:
=========
	45.8 ===> 0.8 > 0.5 ===> ADD "1" TO MAIN VALUE
	+1
	====
	46
	====

EX:
SQL> SELECT ROUND(45.24,1) FROM DUAL;

SOLUTION:
=========
	45.24===> 45.2 ===> 0.4 < 0.5 ===> ADD "0" TO DECIMAL VALUE
		    +0
		 ======
		  45.2
		========


EX:
SQL> SELECT ROUND(45.25,1) FROM DUAL;

SOLUTION:
=========
	45.25===> 45.2 ===> 0.5 = 0.5 ===> ADD "1" TO DECIMAL VALUE
		    +1
		 ======
		  45.3
		========


EX:
SQL> SELECT ROUND(45.28,1) FROM DUAL;

SOLUTION:
=========
	45.28===> 45.2 ===> 0.8 > 0.5 ===> ADD "1" TO DECIMAL VALUE
		    +1
		 ======
		  45.3
		========

TRUNC():
========
	- it return an exact value from the given expression.
	- it will not consider 0.5 expression.

syntax:
=======
	trunc(expression[,decimal places])

Ex:
SQL> SELECT trunc(45.2) FROM DUAL;

TRUNC(45.2)
-----------
         45

SQL> SELECT trunc(45.5) FROM DUAL;

TRUNC(45.5)
-----------
         45

SQL> SELECT trunc(45.8) FROM DUAL;

TRUNC(45.8)
-----------
         45

SQL> SELECT trunc(45.243,2) FROM DUAL;

TRUNC(45.243,2)
---------------
          45.24

SQL> SELECT trunc(45.245,2) FROM DUAL;

TRUNC(45.245,2)
---------------
          45.24

SQL> SELECT trunc(45.248,2) FROM DUAL;

TRUNC(45.248,2)
---------------
          45.24

Character / String functions:
=============================
LENGTH():
=========
	- it return length of the given string.

syntax:
=======
	length(string)

EX:
SQL> SELECT LENGTH('HELLO') FROM DUAL;----------5
SQL> SELECT LENGTH('WEL COME') FROM DUAL;-------8

EX:
SQL> SELECT ENAME,LENGTH(ENAME) FROM EMP;
SQL> SELECT * FROM EMP WHERE LENGTH(ENAME)=5;
SQL> SELECT * FROM EMP WHERE LENGTH(ENAME)<5;
SQL> SELECT * FROM EMP WHERE LENGTH(ENAME)>5;

LOWER():
========
	- to convert upper case characters into lower case characters.
syntax:
=======
	lower(string)

EX:
SQL> SELECT LOWER('HELLO') FROM DUAL;

LOWER
-----
hello

EX:
SQL> SELECT LOWER(ENAME) FROM EMP;
SQL> UPDATE EMP SET ENAME=LOWER(ENAME) WHERE JOB='MANAGER';
SQL> UPDATE EMP SET ENAME=LOWER(ENAME);

UPPER():
=======
	- to convert lower case characters into upper case characters.
syntax:
=======
	upper(string)

EX:
SQL> SELECT UPPER(ENAME) FROM EMP;
SQL> UPDATE EMP SET ENAME=UPPER(ENAME);

CONCAT():
=========
	- to add two string expressions.

syntax:
=======
	concat(string1,string2)

Ex:
SQL> SELECT CONCAT('HAI','BYE') FROM DUAL;

CONCAT
------
HAIBYE

SQL> SELECT ENAME,CONCAT('Mr./ Mis.',ENAME) FROM EMP;

INITCAP():
==========
	- to make the initial character is capital from the given string.

syntax:
=======
	initcap(string)

Ex:
SQL> SELECT INITCAP('YUVIN') FROM DUAL;

INITC
-----
Yuvin

SQL> SELECT INITCAP('yuvin') FROM DUAL;

INITC
-----
Yuvin

SQL> SELECT INITCAP('rohit sharma') FROM DUAL;

INITCAP('ROH
------------
Rohit Sharma

SQL> SELECT INITCAP('rohitsharma') FROM DUAL;

INITCAP('RO
-----------
Rohitsharma

Ex:
SQL> SELECT ENAME,INITCAP(ENAME) FROM EMP;
SQL> UPDATE EMP SET ENAME=INITCAP(ENAME);

LTRIM():
=========
	- it remove unwanted characters from the left side of the given string.
syntax:
=======	
	ltrim(string,'<trimming char's>')

Ex:
SQL> SELECT LTRIM('XXXSMITH','X') FROM DUAL;

LTRIM
-----
SMITH

SQL> SELECT LTRIM('XYXSMITH','X') FROM DUAL;

LTRIM('
-------
YXSMITH

SQL> SELECT LTRIM('XYXSMITH','XY') FROM DUAL;

LTRIM
-----
SMITH

SQL> SELECT LTRIM('XYXYSMITH','XY') FROM DUAL;

LTRIM
-----
SMITH


RTRIM():
=========
	- it remove unwanted characters from the right side of the given string.
syntax:
=======	
	rtrim(string,'<trimming char's>')


EX:
SQL> SELECT RTRIM('SMITHXXX','X') FROM DUAL;

RTRIM
-----
SMITH

TRIM():
=======
	- to remove unwanted characters from both sides of the given string.

syntax:
=======
	trim('trimming character' from STRING)

EX:
SQL> SELECT TRIM('X' FROM 'XXSMITHXXX') FROM DUAL;

TRIM(
-----
SMITH

LPAD():
=======
	- to fill a specific character on left side of the given string if the length 
of string is less than to user defined length.	

syntax:
=======
	lpad(string,<user defined length>,'<specific character>')

EX:
SQL> SELECT LPAD('SMITH',10,'@') FROM DUAL;

LPAD('SMIT
----------
@@@@@SMITH

RPAD():
=======
	- to fill a specific character on right side of the given string if the length 
of string is less than to user defined length.	

syntax:
=======
	rpad(string,<user defined length>,'<specific character>')

EX:
SQL> SELECT RPAD('SMITH',10,'&') FROM DUAL;

RPAD('SMIT
----------
SMITH&&&&&

REPLACE():
==========
	- to replace a char to string / string to character / string to string.

syntax:
=======
	replace(string,'<old char's>', '<new char's>')

EX:
SQL> SELECT REPLACE('HELLO','ELLO','XYZ') FROM DUAL;

REPL
----
HXYZ

SQL> SELECT REPLACE('HELLO','ELL','X') FROM DUAL;

REP
---
HXO

SQL> SELECT REPLACE('HELLO','E','MNO') FROM DUAL;

REPLACE
-------
HMNOLLO

TRANSLATE():
============
	- to translate a single character by a single character.

syntax:
=======
	translate(string,'<old char's>','<new char's>')

EX:
SQL> SELECT TRANSLATE('HELLO','ELO','PQR') FROM DUAL;

TRANS
-----
HPQQR
	Here, E=P ; L=Q ; O=R

SUBSTR():
========
	- it return the required substring from the given string expression.

syntax:
=======
	substr(string,<starting position of character>,<length of the characters>)

	Expression:
	===========
			-7-6-5-4-3-2-1
			'W E L C O M E'
			 1 2 3 4 5 6 7

EX:
SQL> SELECT SUBSTR('WELCOME',1,1) FROM DUAL;

S
-
W

SQL> SELECT SUBSTR('WELCOME',1,4) FROM DUAL;

SUBS
----
WELC

SQL> SELECT SUBSTR('WELCOME',3,1) FROM DUAL;

S
-
L

SQL> SELECT SUBSTR('WELCOME',3,5) FROM DUAL;

SUBST
-----
LCOME

SQL> SELECT SUBSTR('WELCOME',6,3) FROM DUAL;

SU
--
ME

SQL> SELECT SUBSTR('WELCOME',-4,3) FROM DUAL;

SUB
---
COM

SQL> SELECT SUBSTR('WELCOME',-6,1) FROM DUAL;

S
-
E

Date functions:
================
SYSDATE:
========
	- it return the current date information of the system.
syntax:
=======
	sysdate

EX:
SQL> SELECT SYSDATE FROM DUAL;

SYSDATE
---------
21-AUG-24

SQL> SELECT SYSDATE+10 FROM DUAL;

SYSDATE+1
---------
31-AUG-24

SQL> SELECT SYSDATE-10 FROM DUAL;

SYSDATE-1
---------
11-AUG-24

ADD_MONTHS():
==============
	-to add / subtract no.of months from the given date / to the given date.

syntax:
=======
	add_month(date,<no.of months>)

Ex:
SQL> SELECT ADD_MONTHS(SYSDATE,3) FROM DUAL;

ADD_MONTH
---------
21-NOV-24

SQL> SELECT ADD_MONTHS(SYSDATE,-3) FROM DUAL;

ADD_MONTH
---------
21-MAY-24

LAST_DAY():
============
	- it return the last day of the given month in the date expression.

syntax:
=======
	last_day(date)

EX:
SQL> SELECT LAST_DAY(SYSDATE) FROM DUAL;

LAST_DAY(
---------
31-AUG-24

SQL> SELECT LAST_DAY('12-MAR-2022') FROM DUAL;

LAST_DAY(
---------
31-MAR-22

MONTHS_BETWEEN():
=================
	- it return the no.of months in between the given two dates.
syntax:
=======
	months_between(date1,date2)

NOTE:
=====
	- Here date1 is always greater than to date2 otherwise it return (-ve) sign value.

EX:
SQL> SELECT MONTHS_BETWEEN('05-JUN-2023','05-JUN-2024') FROM DUAL;------> -12
SQL> SELECT MONTHS_BETWEEN('05-JUN-2024','05-JUN-2023') FROM DUAL;------> 12

NULL FUNCTIONS:
===============
	What is NULL?
	=============
		- NULL is an empty / a undefined value / a unknown value in database.
		- NULL != 0 , NULL != space.
		- If any arithmetic operator is performing some operation with NULL
	then it again return NULL only.

	Ex:
		If x=100
			i) x+null ==> 100+null ===> null
			ii) x-null ==> 100-null  ===> null
			iii) x*null => 100*null  ===> null
			iv) x/null ==> 100 / null ===> null
Ex:
waq to display EMPNO,ENAME,SALARY,COMMISSION and SAL+COMM from emp table
whose employee name is "SMITH"?
SQL> SELECT EMPNO,ENAME,SAL,COMM,SAL+COMM AS TOTAL_SALARY
          FROM EMP WHERE ENAME='SMITH';

OUTPUT:
========
     EMPNO ENAME  SAL    COMM  TOTAL_SALARY
      ----------  ----------    ---------- ----------  ------------
      7369    SMITH   800

NOTE:
=====
	- In the above example the employee SMITH salary is 800 but there is a no 
commission so that salary+commission is 800 only but it returns NULL.
	- To overcome the above problem oracle provide "NULL functions" those are,
			i) NVL(exp1,exp2)
			ii) NVL2(exp1,exp2,exp3)

i) NVL(exp1,exp2):
===============
	- it stands for "null value".
	- it is used to replace a user defined value inplace of NULL in the expression.
	- this function is having two arguments are Expression1 and Expression2.
		> If exp1 is NULL then return exp2 value(user defined value).
		> If exp1 is NOT NULL then return exp1 value only.

EX:
SQL> SELECT NVL(NULL,0) FROM DUAL;-----------> 0
SQL> SELECT NVL(NULL,100) FROM DUAL;-------> 100
SQL> SELECT NVL(0,100) FROM DUAL;--------------> 0
SQL> SELECT NVL(500,100) FROM DUAL;----------> 500

Solution:
=======
SQL> SELECT EMPNO,ENAME,SAL,COMM,SAL+NVL(COMM,0) AS TOTAL_SALARY
          FROM EMP WHERE ENAME='SMITH';

OUTPUT:
========
     EMPNO ENAME  SAL    COMM  TOTAL_SALARY
      ----------  ----------    ---------- ----------  ------------
      7369    SMITH   800	     800

ii) NVL2(exp1,exp2,exp3):
======================
	- it is an extesion of NVL().
	- this function is having 3 arguments are expression1,expression2 and expression3.
		> If exp1 is NULL then it return exp3 value(user defined value).
		> if exp1 is NOT NULL then it return exp2 value(user defined value).

EX:
SQL> SELECT NVL2(NULL,100,200) FROM DUAL;---------> 200
SQL> SELECT NVL2(0,100,200) FROM DUAL;----------------> 100
SQL> SELECT NVL2(500,100,200) FROM DUAL;------------> 100

EX:
waq to update all employees commissions in the table as per the following conditions are,
	i) if employee COMM is NULL then update those employees commissions as 900.
	ii) if employee COMM is NOT NULL then update those employees commissions as COMM+300.
SOLUTION:
==========
SQL> UPDATE EMP SET COMM=NVL2(COMM,COMM+300,900);

CONVERSION FUNCTIONS:
=======================
	i) TO_CHAR()
	ii) TO_DATE()

i) TO_CHAR():
============
	- to convert date type to char type and aslo display date in different formats.
syntax:
======
	to_char(sysdate,'interval')

Year Formats:
---------------------------
YYYY	 - Year in four digits format
YY	 - Last two digits from the year
YEAR	 - Twenty Twenty-Four
CC	 - Centuary 21
AD / BC	 - AD Year / BC Year

EX:
SQL> SELECT TO_CHAR(SYSDATE,'YY YYYY YEAR CC BC') FROM DUAL;

OUTPUT:
-----------------------------------------------------------------
24 2024 TWENTY TWENTY-FOUR 21 AD

Month Format:
----------------------------
MM	 - Month In Number Format
MON	 - First Three Char's From Month Spelling
MONTH	 - Full Name Of Month

EX:
SQL> SELECT TO_CHAR(SYSDATE,'MM MON MONTH') FROM DUAL;

OUTPUT:
----------------------------------------------------
08 AUG AUGUST

Day Formats:
-------------------------
DDD	 - Day Of The Year.
DD	 - Day Of The Month.
D 	 - Day Of The Week
		Sun 	- 1
		Mon 	- 2
		Tue 	- 3
		Wen 	- 4
		Thu 	- 5
		Fri 	- 6
		Sat 	- 7

DAY	 - Full Name Of The Day 
DY	 - First Three Char's Of Day Spelling

EX:
SQL> SELECT TO_CHAR(SYSDATE,'DDD DD D DY DAY') FROM DUAL;

OUTPUT:
----------------------------------------------------------
236 23 6 FRI FRIDAY

Quater Format:
----------------------------
	Q - One Digit Quater Of The Year
		1 - Jan - Mar
		2 - Apr - Jun
		3 - Jul - Sep
		4 - Oct - Dec

EX:
SQL> SELECT TO_CHAR(SYSDATE,'Q') FROM DUAL;

OUTPUT:
---------------
3

Week Format:
--------------------------
WW	 - Week Of The Year
W 	 - Week Of Month

SQL> SELECT TO_CHAR(SYSDATE,'WW W') FROM DUAL;

OUTPUT:
---------------
34 4

Time Format:
-------------------------
HH	 - Hour Part In 12hrs Format
HH24	 - Hour Part In 24hrs Format
MI	 - Minute Part
SS	 - Seconds Part
AM / PM	 - Am Time (Or) Pm Time

EX:
SQL> SELECT TO_CHAR(SYSDATE,'HH HH24 MI SS AM') FROM DUAL;

OUTPUT:
----------------
04 16 47 58 PM

EX:
waq to display employees joined years from emp table?
SQL> SELECT ENAME,TO_CHAR(HIREDATE,'YYYY') AS JOINED_YEAR FROM EMP;

Ex:
waq to display employees who are joined in 1981 by using to_char()?
SQL> SELECT * FROM EMP WHERE TO_CHAR(HIREDATE,'YYYY')='1981';
		(OR)
SQL> SELECT * FROM EMP WHERE TO_CHAR(HIREDATE,'YY')='81';
		(OR)
SQL> SELECT * FROM EMP WHERE TO_CHAR(HIREDATE,'YEAR')='NINETEEN EIGHTY-ONE';

Ex:
waq to display employees who are joined in 1980,1982,1983 by using to_char()?
SQL> SELECT * FROM EMP WHERE TO_CHAR(HIREDATE,'YYYY') IN('1980','1982','1983');

Ex:
waq to display employees who are joined in the month of DECEMBER?
SQL> SELECT * FROM EMP WHERE TO_CHAR(HIREDATE,'MON')='DEC';

Ex:
waq to display employees who are joined in the month of DECEMBER in 1982?
SQL> SELECT * FROM EMP WHERE TO_CHAR(HIREDATE,'MMYYYY')='121982';

Ex:
waq to display employees joined day?
SQL> SELECT ENAME,HIREDATE,TO_CHAR(HIREDATE,'DAY') AS JOINED_DAY FROM EMP;

EX:
waq to display employees who are joined on FRIDAY?
SQL> SELECT * FROM EMP WHERE TO_CHAR(HIREDATE,'DY')='FRI';

EX:
waq to display employees who are joined on weekend?
SQL> SELECT * FROM EMP WHERE TO_CHAR(HIREDATE,'DY')IN('SAT','SUN');

EX:
waq to display employees joined week?
SQL> SELECT ENAME,HIREDATE,TO_CHAR(HIREDATE,'W') FROM EMP;

EX:
waq to display employees who are joined in the 2nd week of DECEMBER?
SQL> SELECT * FROM EMP WHERE TO_CHAR(HIREDATE,'W')='2' AND TO_CHAR(HIREDATE,'MON')='DEC';
			(OR)
SQL> SELECT * FROM EMP WHERE TO_CHAR(HIREDATE,'WMM')='212';

EX:
waq to display employees who are joined in the 1st week of DECEMBER in 1981?
SQL> SELECT * FROM EMP WHERE TO_CHAR(HIREDATE,'WMMYYYY')='1121981';

EX:
waq to display employees who are joined 3rd quater of the year?
SQL> SELECT * FROM EMP WHERE TO_CHAR(HIREDATE,'Q')='3';

EX:
waq to display employees who are joined 2nd quater of 1981?
SQL> SELECT * FROM EMP WHERE TO_CHAR(HIREDATE,'Q')='2' AND TO_CHAR(HIREDATE,'YYYY')='1981';
			(OR)
SQL> SELECT * FROM EMP WHERE TO_CHAR(HIREDATE,'QYYYY')='21981';

ii) TO_DATE():
============
	- to convert char type to oracle default date type.

syntax:
=======
	to_date(string)

EX:
SQL> SELECT TO_DATE('23/AUGUST/2022') FROM DUAL;
23-AUG-22

SQL> SELECT TO_DATE('23/AUGUST/2022')+5 FROM DUAL;
28-AUG-22

SQL> SELECT TO_DATE('23/AUGUST/2022')-5 FROM DUAL;
18-AUG-22

ii) Multiple - row functions:
=======================
	- these functions are also called as "grouping / aggregative" functions in 
database.

SUM():
======
	- it return total value.

EX:
SQL> SELECT SUM(SAL) FROM EMP;
SQL> SELECT SUM(SAL) FROM EMP WHERE JOB='MANAGER';

AVG():
=====
	- it return the average value.

EX:
SQL> SELECT AVG(SAL) FROM EMP;
SQL> SELECT AVG(SAL) FROM EMP WHERE DEPTNO=20;

MIN():
=====
	- it return minimum value.
EX:
SQL> SELECT MIN(SAL) FROM EMP;
SQL> SELECT MIN(HIREDATE) FROM EMP;
SQL> SELECT MIN(SAL) FROM EMP WHERE JOB='SALESMAN';

MAX():
=====
	- it return maximum value.
EX:
SQL> SELECT MAX(SAL) FROM EMP;

COUNT():
========
	- it again classfied into three types.

i) count(*):
=========
	- counting all rows including duplicates and nulls from a table.

EX:
SQL> SELECT COUNT(*) FROM EMP;

  COUNT(*)
----------
        14

ii) count(column name):
=====================
	- counting all  values including duplicate values but not nulls from a specific
column.

EX:
SQL> SELECT COUNT(MGR) FROM EMP;

COUNT(MGR)
----------
        13

iii) count(distinct <column name>):
=============================
	- counting all unique values only.(i.e no duplicates & no nulls)

EX:

SQL> SELECT COUNT(DISTINCT MGR) FROM EMP;

COUNT(DISTINCTMGR)
------------------
                 6


























































































				
	









































